name: main test & release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'

jobs:
  test_release:
    name: Test & release
    strategy:
      matrix:
        os: [ self-hosted-ubuntu-2204 ]
        java-version: [ 21 ]
        node-version: [ 18 ]
    runs-on: {{ "${{ matrix.os }}" }}
    outputs:
      new-release-published: {{ "${{ steps.semantic.outputs.new_release_published }}" }}
      new-release-version: {{ "${{ steps.semantic.outputs.new_release_version }}" }}
    env:
      GITHUB_TOKEN: {{ "${{ secrets.ACTION_GITHUB_TOKEN }}" }}

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: {{ "${{ secrets.DOCKERHUB_USERNAME }}" }}
          password: {{ "${{ secrets.DOCKERHUB_TOKEN }}" }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK & Maven caching
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: {{ "${{ matrix.java-version }}" }}
          cache: maven

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: {{ "${{ matrix.node-version }}" }}

      - name: Formatting check
        run: ./mvnw -B spotless:check

      - name: Build & test
        run: ./mvnw -B clean verify

      - name: Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v3
        with:
          extra_plugins: |
            @semantic-release/git

  docker:
    name: Create & publish Docker image
    needs: [ test_release ]
    if: needs.test_release.outputs.new-release-published == 'true'
    strategy:
      matrix:
        os: [ self-hosted-ubuntu-2204 ]
        java-version: [ 21 ]
        node-version: [ 18 ]
    runs-on: {{ "${{ matrix.os }}" }}
    env:
      GITHUB_TOKEN: {{ "${{ secrets.ACTION_GITHUB_TOKEN }}" }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK & Maven caching
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: {{ "${{ matrix.java-version }}" }}
          cache: maven

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: {{ "${{ matrix.node-version }}" }}

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: 724428741115

      - name: Set environment variables
        run: |
          echo "ecr_registry={{ "${{ steps.login-ecr.outputs.registry }}" }}/imgarena/streams/{{ project_slug }}" >> $GITHUB_ENV

      - name: Restore Docker registry cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker-registry
          key: {{ "${{ runner.os }}" }}-docker-registry-{{ "${{ github.workflow }}" }}-{{ "${{ hashFiles('**/pom.xml') }}" }}
          restore-keys: {{ "${{ runner.os }}" }}-docker-registry-{{ "${{ github.workflow }}" }}

      - name: Start local registry
        run: |
          docker run -d -p 9005:9005 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:9005
          docker pull localhost:9005/streams/{{ project_slug }} || true

      - name: Build Docker image with Spring Boot Maven plugin
        run: |
          ./mvnw -B spring-boot:build-image -DskipTests=true -Drevision={{ "${{ needs.test_release.outputs.new-release-version }}" }}
          docker tag streams/{{ project_slug }}:latest {{ "${{ env.ecr_registry }}" }}:{{ "${{ needs.test_release.outputs.new-release-version }}" }}

      - name: Cache images
        run: |
          docker tag streams/{{ project_slug }} localhost:9005/{{ project_slug }} && docker push localhost:9005/streams/{{ project_slug }} || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '{{ "${{ env.ecr_registry }}" }}:{{ "${{ needs.test_release.outputs.new-release-version }}" }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Publish Docker image
        id: publish
        run: |
          docker push {{ "${{ env.ecr_registry }}" }}:{{ "${{ needs.test_release.outputs.new-release-version }}" }}
          echo "deployed=true" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: steps.publish.outputs.deployed
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_ICON: 'https://github.githubassets.com/images/modules/logos_page/Octocat.png'
          SLACK_USERNAME: 'GitHub'
          SLACK_CHANNEL: 'tech_streams_releases'
          SLACK_WEBHOOK: {{ "${{ secrets.SLACK_WEBHOOK_URL }}" }}
          SLACK_COLOR: '#109c00'
          MSG_MINIMAL: true
          SLACK_MESSAGE: "Version *{{ "${{ needs.test_release.outputs.new-release-version }}" }}* of `{{ "${{ github.repository }}" }}` has been published. :ship:"
